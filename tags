!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
Autoencoder	autoencoder.py	/^class Autoencoder(nn.Module):$/;"	c
FIM	fisher_transform.py	/^from nngeometry.metrics import FIM$/;"	i
MNISTModel	autoencoder.py	/^class MNISTModel():$/;"	c
PMatBlockDiag	fisher_transform.py	/^from nngeometry.object.pspace import PMatBlockDiag, PMatDense, PMatKFAC, PMatDiag$/;"	i
PMatDense	fisher_transform.py	/^from nngeometry.object.pspace import PMatBlockDiag, PMatDense, PMatKFAC, PMatDiag$/;"	i
PMatDiag	fisher_transform.py	/^from nngeometry.object.pspace import PMatBlockDiag, PMatDense, PMatKFAC, PMatDiag$/;"	i
PMatKFAC	fisher_transform.py	/^from nngeometry.object.pspace import PMatBlockDiag, PMatDense, PMatKFAC, PMatDiag$/;"	i
__init__	autoencoder.py	/^    def __init__(self, input_size, latent_size):$/;"	m	class:Autoencoder
__init__	autoencoder.py	/^    def __init__(self, latent_dim=256, batch_size=1000):$/;"	m	class:MNISTModel
_count_params	fisher_transform.py	/^def _count_params(model):$/;"	f
_find_layers	fisher_transform.py	/^def _find_layers(sloppy_rows, cum_param_count):$/;"	f
diagonalise_fisher	fisher_transform.py	/^def diagonalise_fisher(fim, num_stiff=120):$/;"	f
extract_blocks	fisher_transform.py	/^def extract_blocks(A):$/;"	f
find_fisher	fisher_transform.py	/^def find_fisher(net, loader, n_output, histogram=False,$/;"	f
forward	autoencoder.py	/^    def forward(self, x):$/;"	m	class:Autoencoder
get_sloppy_rows	fisher_transform.py	/^def get_sloppy_rows(fim, model, cutoff, diag=True, encoder_param_end=15680):$/;"	f
matplotlib	fisher_transform.py	/^import matplotlib.pyplot as plt$/;"	i
model	autoencoder.py	/^    model = MNISTModel()$/;"	v	class:MNISTModel
namedtuple	fisher_transform.py	/^from collections import namedtuple$/;"	i
nn	autoencoder.py	/^import torch.nn as nn$/;"	i
nn	fisher_transform.py	/^import torch.nn as nn$/;"	i
np	fisher_transform.py	/^import numpy as np$/;"	i
optim	autoencoder.py	/^import torch.optim as optim$/;"	i
plt	fisher_transform.py	/^import matplotlib.pyplot as plt$/;"	i
torch	autoencoder.py	/^import torch$/;"	i
torch	autoencoder.py	/^import torch.nn as nn$/;"	i
torch	autoencoder.py	/^import torch.optim as optim$/;"	i
torch	fisher_transform.py	/^import torch$/;"	i
torch	fisher_transform.py	/^import torch.nn as nn$/;"	i
torchvision	autoencoder.py	/^import torchvision$/;"	i
torchvision	autoencoder.py	/^import torchvision.transforms as transforms$/;"	i
tqdm	autoencoder.py	/^from tqdm.autonotebook import tqdm$/;"	i
train	autoencoder.py	/^    def train(self, lr=0.001, num_epochs=10):$/;"	m	class:MNISTModel
transforms	autoencoder.py	/^import torchvision.transforms as transforms$/;"	i
zero_sloppy_params	fisher_transform.py	/^def zero_sloppy_params(fim, sloppy_rows, model):$/;"	f
